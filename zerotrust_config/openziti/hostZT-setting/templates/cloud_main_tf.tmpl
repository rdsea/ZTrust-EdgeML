terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "6.8.0"
    }
  }
}

provider "google" {
  project = "{{project_name}}"
  region  = "{{region}}"
}

resource "google_compute_instance" "ziti_controller_router" {
  name         = "ziti-controller-router"
  machine_type = "{{machine_type}}"
  zone         = "{{zone}}"
  tags         = ["ziti", "controller"]

  boot_disk {
    initialize_params {
      image = "{{image}}"
    }
  }

  network_interface {
    network       = "default"
    access_config {}
  }

  metadata = {
    ssh-keys = "{{ssh_user}}:${file("{{ssh_public_key_path}}")}"
  }

  connection {
    type        = "ssh"
    user        = "{{ssh_user}}"
    private_key = file("{{ssh_private_key_path}}")
    host        = self.network_interface[0].access_config[0].network_ip
  }

  metadata_startup_script = templatefile("ziti-mq-init.sh.tmpl", {
    controller_ip = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
    router_ip     = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
  })
}

resource "google_compute_instance" "message_q" {
  name         = "cloud-messageq"
  machine_type = "{{machine_type}}"
  zone         = "{{zone}}"
  tags         = ["cloud-messageq", "ziti-app"]

  boot_disk {
    initialize_params {
      image = "{{image}}"
    }
  }

  network_interface {
    network       = "default"
    access_config {}
  }

  metadata = {
    ssh-keys = "{{ssh_user}}:${file("{{ssh_public_key_path}}")}"
  }

  connection {
    type        = "ssh"
    user        = "{{ssh_user}}"
    private_key = file("{{ssh_private_key_path}}")
    host        = self.network_interface[0].access_config[0].network_ip
  }

  provisioner "remote-exec" {
    inline = [
      "mkdir -p /home/{{ssh_user}}/app"
    ]
  }

  provisioner "file" {
    source      = "../../../../applications/machine_learning/object_classification/src/database/"
    destination = "/home/{{ssh_user}}/app/"
  }

  metadata_startup_script = templatefile("ziti-mq-init.sh.tmpl", {
    controller_ip = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
    router_ip     = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
  })
}

resource "google_compute_instance" "database" {
  name         = "cloud-db"
  machine_type = "{{machine_type}}"
  zone         = "{{zone}}"
  tags         = ["cloud-db", "ziti-app"]

  boot_disk {
    initialize_params {
      image = "{{image}}"
    }
  }

  network_interface {
    network       = "default"
    access_config {}
  }

  metadata = {
    ssh-keys = "{{ssh_user}}:${file("{{ssh_public_key_path}}")}"
  }

  connection {
    type        = "ssh"
    user        = "{{ssh_user}}"
    private_key = file("{{ssh_private_key_path}}")
    host        = self.network_interface[0].access_config[0].network_ip
  }

  metadata_startup_script = templatefile("ziti-db-init.sh.tmpl", {
    controller_ip = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
    router_ip     = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
  })
}

resource "google_compute_instance" "jaeger" {
  name         = "jaeger-db"
  machine_type = "{{machine_type}}"
  zone         = "{{zone}}"
  tags         = ["jaeger-db", "ziti-metric"]

  boot_disk {
    initialize_params {
      image = "{{image}}"
    }
  }

  network_interface {
    network       = "default"
    access_config {}
  }

  metadata = {
    ssh-keys = "{{ssh_user}}:${file("{{ssh_public_key_path}}")}"
  }

  connection {
    type        = "ssh"
    user        = "{{ssh_user}}"
    private_key = file("{{ssh_private_key_path}}")
    host        = self.network_interface[0].access_config[0].network_ip
  }

  metadata_startup_script = templatefile("ziti-db-init.sh.tmpl", {
    controller_ip = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
    router_ip     = google_compute_instance.ziti_controller_router.network_interface[0].network_ip
  })

}

# ------------------------------
# Shared Firewall Rules
# ------------------------------
resource "google_compute_firewall" "allow-ssh" {
  name    = "allow-ssh"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = ["0.0.0.0/0"]
}

resource "google_compute_firewall" "allow-ziti" {
  name    = "allow-ziti-app"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["1280", "3022", "443", "6262", "10080", "10000", "8440-8443"]
  }

  source_ranges = ["0.0.0.0/0"]
}

resource "google_compute_firewall" "allow-app" {
  name    = "allow-app-messq-ports"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["5672", "27017" ]
  }

  source_ranges = ["0.0.0.0/0"]
}

resource "google_compute_firewall" "allow-jaeger" {
  name    = "allow-jaeger-ports"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["4318" ]
  }

  source_ranges = ["0.0.0.0/0"]
}
# ------------------------------
# Outputs
# ------------------------------
output "controller_ip" {
  value = google_compute_instance.ziti_controller_router.network_interface[0].access_config[0].network_ip
}
output "messageq_ip" {
  value = google_compute_instance.message_q.network_interface[0].access_config[0].network_ip
}
output "database_ip" {
  value = google_compute_instance.database.network_interface[0].access_config[0].network_ip
}
output "jaeger_ip" {
  value = google_compute_instance.jaeger.network_interface[0].access_config[0].network_ip
}
