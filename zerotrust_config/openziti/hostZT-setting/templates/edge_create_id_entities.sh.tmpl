#!/bin/bash

set -euo pipefail

# Source the common functions
# shellcheck source=common.sh.tmpl
source "common.sh"

# ==============================================================================
# VARIABLES
# ==============================================================================

# Ziti CLI path
ZITI_CLI="/opt/openziti/bin/ziti"

# ==============================================================================
# FUNCTIONS
# ==============================================================================

# --- Function to create Ziti service and policies ---
create_ziti_service() {
  local name="$1"
  local port="$2"
  local intercept_address="$3"
  local host_address="$4"
  local service_roles="$5"
  local bind_identity_roles="$6"
  local dial_identity_roles="$7"

  log "Creating Ziti service: $name"

  # Create intercept config
  "$ZITI_CLI" edge create config "${name}-intercept-config" intercept.v1 \
    "{\"protocols\":[\"tcp\"],\"addresses\":[\"${intercept_address}\"], \"portRanges\":[{\"low\":${port}, \"high\":${port}}]}"

  # Create host config
  "$ZITI_CLI" edge create config "${name}-host-config" host.v1 \
    "{\"protocol\":\"tcp\", \"address\":\"${host_address}\",\"port\":${port}}"

  # Create service
  "$ZITI_CLI" edge create service "${name}-service" \
    --configs "${name}-intercept-config,${name}-host-config" --role-attributes "$service_roles"

  # Create bind policy
  "$ZITI_CLI" edge create service-policy "${name}-bind-policy" Bind \
    --service-roles "@${name}-service" --identity-roles "$bind_identity_roles"

  # Create dial policy
  "$ZITI_CLI" edge create service-policy "${name}-dial-policy" Dial \
    --service-roles "@${name}-service" --identity-roles "$dial_identity_roles"
}

# ==============================================================================
# MAIN EXECUTION
# ==============================================================================

main() {
  log "Creating Ziti Identities, Services, and Policies"

  # Create identities and services for each application
  {% for app in edge_applications %}
  create_and_enroll_identity "{{ app.name }}-$(cat /etc/hostname)" "{{ app.roles | join(',') }}"
  {% if app.port %}
  create_ziti_service \
    "{{ app.name }}" \
    "{{ app.port }}" \
    "{{ app.intercept_address }}" \
    "{{ app.host_address }}" \
    "{{ app.roles | join(',') }}" \
    "{{ app.bind_identity_roles | join(',') }}" \
    "{{ app.dial_identity_roles | join(',') }}"
  {% endif %}
  {% endfor %}

  # Add specific policies that are not tied to a single application
  log "Creating general Ziti policies"

  {% for policy in policies %}
  "$ZITI_CLI" edge create {% if policy.type == "edge-router-policy" %}{{ policy.type }} "{{ policy.name }}" \
    --edge-router-roles '{{ policy.edge_router_roles }}' --identity-roles '{{ policy.identity_roles }}'
  {% else %}{{ policy.type }} "{{ policy.name }}" \
    --edge-router-roles '{{ policy.edge_router_roles }}' --service-roles '{{ policy.service_roles }}'
  {% endif %}
  {% endfor %}
 #  "$ZITI_CLI" edge create edge-router-policy "public-routers" \
 #    --edge-router-roles '#public-routers' --identity-roles '#all'

 #  "$ZITI_CLI" edge create service-edge-router-policy "public-routers" \
 #    --edge-router-roles '#public-routers' --service-roles '#all'

 #  "$ZITI_CLI" edge create edge-router-policy allow.id.router_edge --edge-router-roles '#edge' --identity-roles '#edge'
 #  "$ZITI_CLI" edge create service-edge-router-policy allow.svc.router_edge --edge-router-roles '#edge' --service-roles '#edge'

 #  "$ZITI_CLI" edge create edge-router-policy allow.id.router_cloud --edge-router-roles '#cloud' --identity-roles '#cloud'
 #  "$ZITI_CLI" edge create service-edge-router-policy allow.svc.router_cloud --edge-router-roles '#cloud' --service-roles '#cloud'

  log "Ziti identity and service creation complete."
}

main "$@"
