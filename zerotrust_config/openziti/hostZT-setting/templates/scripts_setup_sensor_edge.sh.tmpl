#!/bin/bash

set -euo pipefail

# ==============================================================================
# VARIABLES
# ==============================================================================

# --- Fetch values from Terraform outputs ---
# CTRL_IP=$(cd cloud && terraform output -raw controller_ip)
# CLOUD_ROUTER_IP=$(cd cloud && terraform output -raw controller_ip)
# MESSAGEQ_IP=$(cd cloud && terraform output -raw messageq_ip)
# JAEGER_IP=$(cd cloud && terraform output -raw database_ip)

{% for vm in vms %}
{{ vm.name | replace('-', '_') | upper }}_IP=$(cd ../cloud/ && terraform output -raw {{ vm.name | replace('-', '_') }}_ip)
{% if not loop.last %}
{% endif %}{% endfor %}


# ==============================================================================
# FUNCTIONS
# ==============================================================================

# --- Helper function for logging ---
log() {
  echo "############ $1 ############"
}

# --- Generic function to deploy a script to a target machine ---
deploy_script() {
  local target_ip="$1"
  local ssh_user="$2"
  local ssh_pass="$3"
  local setup_script="$4"
  local script_args="$5"
  shift 5

  log "Deploying to $target_ip"

  scp "$setup_script" "$ssh_user@$target_ip:~/{{ ssh_user }}/"
  scp "cleaning.sh" "$ssh_user@$target_ip:~/{{ ssh_user }}/"
  scp "common.sh" "$ssh_user@$target_ip:~/{{ ssh_user }}/"

  # Now "$@" contains only the optional files
  if [[ "$#" -ge 1 ]]; then
    scp -r "$@" "$ssh_user@$target_ip:~/{{ ssh_user }}/"
  else
    echo "No extra local files to copy."
  fi

  ssh "$ssh_user@$target_ip" "echo '$ssh_pass' | sudo -S bash ~/{{ ssh_user }}/cleaning.sh"

  ssh "$ssh_user@$target_ip" \
    "echo '$ssh_pass' | sudo -E -S env $script_args bash ~/{{ ssh_user }}/$(basename "$setup_script")"
}
# ==============================================================================
# MAIN EXECUTION
# ==============================================================================

main() {
  # --- Deploy to Edge Router ---
  {% for edge_r in ziti_config.router.edge_router %}
  deploy_script "{{ edge_r.edge_router_ip }}" "{{ edge_r.ssh_user }}" "{{ edge_r.ssh_pass }}" \
    "../edge/setup_{{ edge_r.id }}.sh" \
    "CLOUD_IP=$ZITI_CONTROLLER_ROUTER_IP SSH_USER={{ edge_r.ssh_user }}" 
  {% endfor %}

  # --- Deploy to Edge App ---
  {% for edge_ in edge_deployment.edge %}
  deploy_script "{{ edge_.edge_app_ip }}" "{{ edge_.ssh_user }}" "{{ edge_.ssh_pass }}" \
    "../edge/setup_edge_app.sh" \
    "CLOUD_IP=$ZITI_CONTROLLER_ROUTER_IP JAEGER_IP=$JAEGER_IP SSH_USER={{ edge_.ssh_user }}" \
    "../edge/docker-compose.yml.tmpl" \
    "{{ edge_.src_app }}" \
    "../edge/create_id_entities.sh"
  {% endfor %}

  # --- Deploy to Sensors ---
  {% for sensor_ in edge_deployment.sensor %}
  deploy_script "{{ sensor_.ip }}" "{{ sensor_.ssh_user }}" "{{ sensor_.ssh_pass }}" \
    "../sensor/setup_sensor.sh" \
    "CLOUD_IP=$ZITI_CONTROLLER_ROUTER_IP SSH_USER={{ sensor_.ssh_user }}" \
    "{{ sensor_.loadgen }}" \
    "{{ sensor_.data_src }}"
  {% endfor %}

  log "Edge and Sensor deployment complete."
}

main "$@"
