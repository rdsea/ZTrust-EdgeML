#!/bin/bash

set -e 

# Assumption
# It is not normally necessary to obtain publicly trusted certificates for Ziti's TLS servers.
# Ziti manages the trust relationships between the controller and routers and clients independent of the web's root authorities.
# See the Alternative Web Server Certificates section for more information.


eval "$(cd ../gke/ && terraform output -raw kubeconfig_command)"

CLUSTER_IP=$(cd ../gke/ && terraform output -raw {{ gke.cluster_name | replace('-', '_') }}_ip)

CTRL_ADVERTISED="{{ ziti_config.ctrl.cloud_ctrl.ctrl_advertised_address }}"

# Create namespace if it doesn't exist
NAMESPACE="{{ gke.namespace }}"

if ! kubectl get namespace "$NAMESPACE" >/dev/null 2>&1; then
  echo "Creating namespace: $NAMESPACE"
  kubectl create namespace "$NAMESPACE"
else
  echo "Namespace $NAMESPACE already exists."
fi

helm repo add jetstack https://charts.jetstack.io

helm upgrade --install cert-manager jetstack/cert-manager \
    --namespace cert-manager --create-namespace \
    --set crds.enabled=true


helm upgrade --install trust-manager jetstack/trust-manager \
    --namespace cert-manager \
    --set crds.keep=false \
    --set app.trust.namespace=$NAMESPACE


helm install ziti-controller openziti/ziti-controller \
  --namespace ziti \
  --set cert-manager.enabled=false \
  --set trust-manager.enabled=false \
  --set clientApi.advertisedHost="$CTRL_ADVERTISED" \

echo "$(kubectl get svc ziti-controller-client -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $CTRL_ADVERTISED" | tee -a /etc/hosts

ziti edge login $CTRL_ADVERTISED:443 --yes --username admin --password $(kubectl -n $NAMESPACE get secrets ziti-controller-admin-secret -o go-template='{{index .data "admin-password" | base64decode }}')


